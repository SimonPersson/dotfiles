Common subdirectories: xnotify-orig/.git and xnotify/.git
Only in xnotify: config-bak.h
diff -up xnotify-orig/config.h xnotify/config.h
--- xnotify-orig/config.h	2021-02-22 22:10:56.386255069 +0100
+++ xnotify/config.h	2021-02-22 22:25:26.629579832 +0100
@@ -1,24 +1,27 @@
+#define normBg "#282a36"
+#define selFg "#f8f8f2"
+
 static struct Config config = {
 	/* fonts, separate different fonts with comma */
-	.titlefont = "monospace:size=9:style=bold",
-	.bodyfont = "monospace:size=9",
+	.titlefont = "Terminus:size=11:style=bold",
+	.bodyfont = "Terminus:size=11",
 
 	/* colors */
-	.background_color = "#000000",
-	.foreground_color = "#FFFFFF",
-	.border_color = "#3465a4",
+	.background_color = normBg,
+	.foreground_color = selFg,
+	.border_color = selFg,
 
 	/* geometry and gravity (see the manual) */
-	.geometryspec = "0x0+0+0",
-	.gravityspec = "NE",
+	.geometryspec = "500x900",
+	.gravityspec = "C",
 
 	/* size of border, gaps and image (in pixels) */
 	.border_pixels = 2,
 	.gap_pixels = 7,
-	.image_pixels = 80,     /* if 0, the image will fit the notification */
+	.image_pixels = 500,      /* if 0, the image will fit the notification */
 	.leading_pixels = 5,    /* space between title and body texts */
 	.padding_pixels = 10,   /* space around content */
-	.max_height = 300,      /* maximum height of a notification, after text wrapping */
+	.max_height = 1000,      /* maximum height of a notification, after text wrapping */
 
 	/* text alignment, set to LeftAlignment, CenterAlignment or RightAlignment */
 	.alignment = LeftAlignment,
@@ -33,7 +36,10 @@ static struct Config config = {
 	.sec = 10,
 
 	/* mouse button that makes xnotify prints a notification's CMD: */
-	.actionbutton = Button3
+	.actionbutton = Button3,
+
+	/* display image on top of text, instead of left of text */
+	.vertical = 1
 };
 
 /* string to be replaced by truncated text, should be a single unicode character */
Only in xnotify: lines
Only in xnotify: xnotify
diff -up xnotify-orig/xnotify.1 xnotify/xnotify.1
--- xnotify-orig/xnotify.1	2021-02-22 22:10:56.386255069 +0100
+++ xnotify/xnotify.1	2021-02-22 22:07:27.859169272 +0100
@@ -16,6 +16,7 @@ xnotify \- popup a notification on the s
 .IR monitor ]
 .RB [ \-s
 .IR seconds ]
+.RB [ \-v ]
 .SH DESCRIPTION
 .B xnotify
 is a notification launcher for X,
@@ -75,6 +76,9 @@ is the same as
 .BI "\-h " height
 Maximum height (in pixels) of a notification window.
 .TP
+.BI \-k
+Makes xnotify grab keyboard focus, and close notifications with ESC key.
+.TP
 .BI "\-m " monitor
 Makes xnotify be displayed on the specified monitor.
 Monitor numbers start from 0.
@@ -91,6 +95,9 @@ Specify the time, in seconds,
 for a notification to be displayed before it is removed from screen.
 Without this option, the default of 10 seconds is used.
 If this option is set to 0 (zero), the notification is displayed indefinitely until manually closed.
+.TP
+.B \-v
+Display image above text, instead of to the left of text.
 .PP
 Each line read from stdin specify a notification and has the following format:
 .IP
diff -up xnotify-orig/xnotify.c xnotify/xnotify.c
--- xnotify-orig/xnotify.c	2021-02-22 22:10:56.387255048 +0100
+++ xnotify/xnotify.c	2021-02-22 22:08:14.245404062 +0100
@@ -12,6 +12,7 @@
 #include <X11/Xatom.h>
 #include <X11/Xresource.h>
 #include <X11/Xft/Xft.h>
+#include <X11/keysymdef.h>
 #include <X11/extensions/Xinerama.h>
 #include <Imlib2.h>
 #include "xnotify.h"
@@ -35,6 +36,7 @@ static struct Ellipsis ellipsis;
 
 /* flags */
 static int oflag = 0;   /* whether only one notification must exist at a time */
+static int kflag = 0;   /* whether to grab keyboard input */
 volatile sig_atomic_t usrflag;  /* 1 if for SIGUSR1, 2 for SIGUSR2, 0 otherwise */
 
 /* include configuration structure */
@@ -44,7 +46,7 @@ volatile sig_atomic_t usrflag;  /* 1 if
 void
 usage(void)
 {
-	(void)fprintf(stderr, "usage: xnotify [-o] [-G gravity] [-b button] [-g geometry] [-h height] [-m monitor] [-s seconds]\n");
+	(void)fprintf(stderr, "usage: xnotify [-o] [-v] [-k] [-G gravity] [-b button] [-g geometry] [-h height] [-m monitor] [-s seconds]\n");
 	exit(1);
 }
 
@@ -91,6 +93,10 @@ getresources(void)
 	if (XrmGetResource(xdb, "xnotify.maxHeight", "*", &type, &xval) == True)
 		if ((n = strtoul(xval.addr, NULL, 10)) < INT_MAX)
 			config.max_height = n;
+	if (XrmGetResource(xdb, "xnotify.vertical", "*", &type, &xval) == True)
+		config.vertical = (strcasecmp(xval.addr, "true") == 0 ||
+		                strcasecmp(xval.addr, "on") == 0 ||
+		                strcasecmp(xval.addr, "1") == 0);
 	if (XrmGetResource(xdb, "xnotify.shrink", "*", &type, &xval) == True)
 		config.shrink = (strcasecmp(xval.addr, "true") == 0 ||
 		                strcasecmp(xval.addr, "on") == 0 ||
@@ -116,7 +122,7 @@ getoptions(int argc, char *argv[])
 	unsigned long n;
 	int ch;
 
-	while ((ch = getopt(argc, argv, "G:b:g:h:m:os:")) != -1) {
+	while ((ch = getopt(argc, argv, "G:b:g:h:km:os:v")) != -1) {
 		switch (ch) {
 		case 'G':
 			config.gravityspec = optarg;
@@ -157,10 +163,17 @@ getoptions(int argc, char *argv[])
 		case 'o':
 			oflag = 1;
 			break;
+		case 'k':
+			oflag = 1;
+			kflag = 1;
+			break;
 		case 's':
 			if ((n = strtoul(optarg, NULL, 10)) < INT_MAX)
 				config.sec = n;
 			break;
+		case 'v':
+			config.vertical = 1;
+			break;
 		default:
 			usage();
 			break;
@@ -814,7 +827,11 @@ drawitem(struct Item *item)
 	texth -= config.leading_pixels;
 
 	/* resize notification window based on its contents */
-	newh = MAX(imageh, texth) + 2 * config.padding_pixels;
+	if(config.vertical) {
+		newh = imageh + texth + 3 * config.padding_pixels;
+	} else {
+		newh = MAX(imageh, texth) + 2 * config.padding_pixels;
+	}
 	item->h = MAX(item->h, newh);
 	XResizeWindow(dpy, item->win, item->w, item->h);
 
@@ -826,12 +843,19 @@ drawitem(struct Item *item)
 		XCopyArea(dpy, imagepixmap, item->pixmap, dc.gc, 0, 0,
 		          config.image_pixels, config.image_pixels,
 		          config.padding_pixels,
-		          (item->h - config.image_pixels) / 2);
+		          config.vertical
+				? config.padding_pixels
+				: (item->h - config.image_pixels) / 2);
 		XFreePixmap(dpy, imagepixmap);
 	}
 	XCopyArea(dpy, textpixmap, item->pixmap, dc.gc, 0, 0, item->textw, texth,
-		  config.padding_pixels + (imagew > 0 ? imagew + config.padding_pixels : 0),
-		  (item->h - texth) / 2);
+		  config.vertical
+		  ? config.padding_pixels
+		  : config.padding_pixels + (imagew > 0 ? imagew + config.padding_pixels : 0),
+		  config.vertical && item->image
+		  ? config.image_pixels + 2 * config.padding_pixels
+		  : (item->h - texth) / 2);
+
 	XFreePixmap(dpy, textpixmap);
 	XftDrawDestroy(draw);
 }
@@ -909,9 +933,17 @@ additem(struct Queue *queue, struct Item
 		}
 		maxw += ellipsis.width;
 		if (item->image) {
-			item->textw = queue->w - config.image_pixels - config.padding_pixels * 3;
+			if(config.vertical) {
+				item->textw = queue->w - config.padding_pixels * 2;
+			} else {
+				item->textw = queue->w - config.image_pixels - config.padding_pixels * 3;
+			}
 			item->textw = MIN(maxw, item->textw);
-			item->w = item->textw + config.image_pixels + config.padding_pixels * 3;
+			if(config.vertical) {
+				item->w = MAX(item->textw, config.image_pixels) + config.padding_pixels * 2;
+			} else {
+				item->w = item->textw + config.image_pixels + config.padding_pixels * 3;
+			}
 		} else {
 			item->textw = queue->w - config.padding_pixels * 2;
 			item->textw = MIN(maxw, item->textw);
@@ -919,7 +951,7 @@ additem(struct Queue *queue, struct Item
 		}
 	} else {
 		item->w = queue->w;
-		if (item->image) {
+		if (item->image && !config.vertical) {
 			item->textw = queue->w - config.image_pixels - config.padding_pixels * 3;
 		} else {
 			item->textw = queue->w - config.padding_pixels * 2;
@@ -944,6 +976,7 @@ delitem(struct Queue *queue, struct Item
 	for (i = 0; i < item->nlines; i++)
 		free(item->line[i]);
 	XFreePixmap(dpy, item->pixmap);
+	if(kflag) XUngrabKeyboard(dpy, CurrentTime);
 	XDestroyWindow(dpy, item->win);
 	if (item->prev)
 		item->prev->next = item->next;
@@ -1065,8 +1098,10 @@ readevent(struct Queue *queue)
 	while (XPending(dpy) && !XNextEvent(dpy, &ev)) {
 		switch (ev.type) {
 		case Expose:
-			if (ev.xexpose.count == 0 && (item = getitem(queue, ev.xexpose.window)) != NULL)
+			if (ev.xexpose.count == 0 && (item = getitem(queue, ev.xexpose.window)) != NULL) {
 				copypixmap(item);
+				if(kflag) XGrabKeyboard(dpy, ev.xexpose.window, False, GrabModeAsync, GrabModeAsync, CurrentTime);
+			}
 			break;
 		case ButtonPress:
 			if ((item = getitem(queue, ev.xbutton.window)) == NULL)
@@ -1075,6 +1110,14 @@ readevent(struct Queue *queue)
 				cmditem(item);
 			delitem(queue, item);
 			break;
+		case KeyPress:
+			if ((item = getitem(queue, ev.xkey.window)) == NULL)
+				break;
+			if ((XLookupKeysym(&ev.xkey, 0) == XK_Escape) ) {
+				if (item->cmd) cmditem(item);
+				delitem(queue, item);
+			}
+			break;
 		case MotionNotify:
 			if ((item = getitem(queue, ev.xmotion.window)) != NULL)
 				resettime(item);
diff -up xnotify-orig/xnotify.h xnotify/xnotify.h
--- xnotify-orig/xnotify.h	2021-02-22 22:10:56.387255048 +0100
+++ xnotify/xnotify.h	2021-02-22 21:55:00.818202242 +0100
@@ -43,6 +43,8 @@ struct Config {
 	int sec;
 
 	unsigned int actionbutton;
+
+	int vertical;
 };
 
 /* monitor geometry structure */
Only in xnotify: xnotify.o
